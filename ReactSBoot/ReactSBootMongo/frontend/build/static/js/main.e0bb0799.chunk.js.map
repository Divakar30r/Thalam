{"version":3,"sources":["components/RecordForm.js","components/RecordList.js","App.js","index.js"],"names":["RecordForm","_ref","record","onSubmit","formData","setFormData","useState","name","address","landmark","taluk","pincode","geolocation","collectioncentre","proximity","coordinates","latitude","longitude","useEffect","handleChange","e","value","target","prevData","_objectSpread","handleGeolocationChange","keys","split","newData","current","i","length","_jsxs","preventDefault","children","_jsx","type","onChange","placeholder","required","RecordList","records","setRecords","fetchRecords","async","response","axios","get","data","error","console","map","onClick","delete","concat","id","deleteRecord","App","fetch","json","method","headers","body","JSON","stringify","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0bb0799.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst RecordForm = ({ record, onSubmit }) => {\n    const [formData, setFormData] = useState({\n        name: '',\n        address: '',\n        landmark: '',\n        taluk: '',\n        pincode: '',\n        geolocation: {\n            collectioncentre: '',\n            proximity: '',\n            coordinates: {\n                latitude: '',\n                longitude: ''\n            }\n        }\n    });\n\n    useEffect(() => {\n        if (record) {\n            setFormData(record);\n        }\n    }, [record]);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData((prevData) => ({\n            ...prevData,\n            [name]: value\n        }));\n    };\n\n    /*\n    const handleGeolocationChange = (e) => {\n        const { name, value } = e.target;\n        const [key, subKey] = name.split('.');\n        console.log(name + \" ** \"+ key + \" ** \"+ subKey+ \" ** \"+ value);\n        setFormData((prevData) => ({\n            ...prevData,\n            [key]: {\n                ...prevData[key],\n                [subKey]: value\n            }\n        }));\n    };\n    */\n\n    const handleGeolocationChange = (e) => {\n        const { name, value } = e.target;\n        const keys = name.split('.');\n    \n        setFormData((prevData) => {\n            // Create a deep copy of prevData\n            const newData = { ...prevData };\n            let current = newData;\n    \n            // Traverse to the correct nested object\n            for (let i = 0; i < keys.length - 1; i++) {\n                // If the key doesn't exist, create an empty object\n                if (!current[keys[i]]) current[keys[i]] = {};\n                current = current[keys[i]];\n            }\n    \n            // Set the value at the deepest level\n            current[keys[keys.length - 1]] = value;\n            return newData;\n        });\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit(formData);\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" name=\"name\" value={formData.name} onChange={handleChange} placeholder=\"Name\" required />\n            <input type=\"text\" name=\"address\" value={formData.address} onChange={handleChange} placeholder=\"Address\" required />\n            <input type=\"text\" name=\"landmark\" value={formData.landmark} onChange={handleChange} placeholder=\"Landmark\" />\n            <input type=\"text\" name=\"taluk\" value={formData.taluk} onChange={handleChange} placeholder=\"Taluk\" />\n            <input type=\"number\" name=\"pincode\" value={formData.pincode} onChange={handleChange} placeholder=\"Pincode\" required />\n            <input type=\"text\" name=\"geolocation.collectioncentre\" value={formData.geolocation.collectioncentre} onChange={handleGeolocationChange} placeholder=\"Collection Centre\" />\n            <input type=\"text\" name=\"geolocation.proximity\" value={formData.geolocation.proximity} onChange={handleGeolocationChange} placeholder=\"Proximity\" />\n            <input type=\"number\" name=\"geolocation.coordinates.latitude\" value={formData.geolocation.coordinates.latitude} onChange={handleGeolocationChange} placeholder=\"Latitude\" required />\n            <input type=\"number\" name=\"geolocation.coordinates.longitude\" value={formData.geolocation.coordinates.longitude} onChange={handleGeolocationChange} placeholder=\"Longitude\" required />\n            <button type=\"submit\">Submit</button>\n        </form>\n    );\n};\n\nexport default RecordForm;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst RecordList = () => {\n    const [records, setRecords] = useState([]);\n\n    useEffect(() => {\n        fetchRecords();\n    }, []);\n\n    const fetchRecords = async () => {\n        try {\n            const response = await axios.get('/api/records');\n            setRecords(response.data);\n        } catch (error) {\n            console.error('Error fetching records:', error);\n        }\n    };\n\n    const deleteRecord = async (id) => {\n        try {\n            await axios.delete(`/api/records/${id}`);\n            fetchRecords(); // Refresh the list after deletion\n        } catch (error) {\n            console.error('Error deleting record:', error);\n        }\n    };\n\n    return (\n        <div>\n            <h2>Record List</h2>\n            <ul>\n              \n                {records.map(record => (\n                    <li key={record.id}>\n                        <div>\n                            <strong>Name:</strong> {record.name}<br />\n                            <strong>Address:</strong> {record.address}<br />\n                            <strong>Landmark:</strong> {record.landmark}<br />\n                            <strong>Taluk:</strong> {record.taluk}<br />\n                            <strong>Pincode:</strong> {record.pincode}<br />\n                            <strong>Collection Centre:</strong> {record.geolocation.collectioncentre}<br />\n                            <strong>Proximity:</strong> {record.geolocation.proximity}<br />\n                            <strong>Coordinates:</strong> {record.geolocation.coordinates.latitude}, {record.geolocation.coordinates.longitude}\n                        </div>\n                        <button onClick={() => deleteRecord(record.id)}>Delete</button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default RecordList;","import React, { useEffect, useState } from 'react';\nimport RecordForm from './components/RecordForm';\nimport RecordList from './components/RecordList';\n\nfunction App() {\n  const [records, setRecords] = useState([]);\n\n  useEffect(() => {\n    fetchRecords();\n  }, []);\n\n  const fetchRecords = async () => {\n    const response = await fetch('/api/records');\n    const data = await response.json();\n    setRecords(data);\n  };\n\n  const addRecord = async (record) => {\n   \n    await fetch('/api/records', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(record),\n    });\n    fetchRecords();\n  };\n\n  const deleteRecord = async (id) => {\n    await fetch(`/api/records/${id}`, {\n      method: 'DELETE',\n    });\n    fetchRecords();\n  };\n \n\n  return (\n    <div>\n      <h1>Record Management</h1>\n      <RecordForm onSubmit={addRecord}  />\n      <RecordList records={records} deleteRecord={deleteRecord} />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}